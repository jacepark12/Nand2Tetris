// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array chars;
    field int max_len;
    field int index;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let index = 0;
        let max_len = maxLength;
        if (maxLength > 0) {
            let chars = Array.new(maxLength);
        }

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (max_len > 0) {
            do chars.dispose();
        }

        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return index;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < max_len) {
            let chars[j] = c;
        }

        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let chars[index] = c;
        let index = index + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let index = index - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, result;
        var char c;
        var boolean is_neg;

        let i = index - 1;
        let result = 0;
        let is_neg = false;

        while(i > -1) {
            let c = chars[i];
            if (String.isDigit(c)) {
                let result = result + (Math.power(10, index -i -1) * String.toDigit(c));
            } else {
                if (c = 45) {
                    let is_neg = true;
                }
            }
            let i = i - 1;
        }

        if (is_neg) {
            return -result;
        }
        return result;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let index = 0;

        if (val < 0) {
            let chars[0] = 45;
            let index = 1;
        }

        let val = Math.abs(val);
        do setIntToChar(val);

        return;
    }

    method void setIntToChar(int x) {
        var int i, j;

        let i = x / 10;
        let j = x - (i * 10);

        if (j > 0) {
            do setIntToChar(i);

            let chars[index] = String.intToChar(j);
            let index = index + 1;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    function boolean isDigit(char c) {
        // 48 ~ 57
        if ( (c > 47) & (c < 58)) {
            return true;
        }

        return false;
    }

    function int toDigit(char c) {
        if (String.isDigit(c)) {
            return c - 48;
        }

        return 0;
    }

    function char intToChar(int x) {
        return x + 48;
    }
}
