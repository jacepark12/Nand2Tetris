// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:

    DMux16(in=instruction, sel=instruction[15], a=commandA, b=commandC);
    Not(in=instruction[15], out=isA);


    // 1. handle dest
    And16(a=commandC, b=true, out[11]=zx, out[10]=nx, out[9]=zy, out[8]=ny, out[7]=f, out[6]=no, out[5]=d1, out[4]=d2, out[3]=d3, out[2]=j1, out[1]=j2, out[0]=j3);
    Or(a=isA, b=d1, out=registerALoad);

    // 2. handle comp
    And16(a=commandC, b=true, out[12]=compA);
    Mux16(a=registerA, b=inM, sel=compA, out=ALUy);
    ALU(x=registerD, y=ALUy, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=ALUout, zr=ALUzr, ng=ALUng);

    FanOut16(in=d1, out=d116);
    FanOut16(in=d2, out=d216);
    FanOut16(in=d3, out=d316);

    And16(a=ALUout, b=d116, out=CRegisterAIn);
    And16(a=ALUout, b=d216, out=RegisterDIn);
    And16(a=ALUout, b=d316, out=outM);
    // out to writeM
    And(a=d3, b=true, out=writeM);

    // 3. handle jmp
    Compare(in=ALUout, j1=j1, j2=j2, j3=j3, out=shouldJump);
    Mux16(a=inM, b=registerA, sel=shouldJump, out=pcIn);

    FanOut16(in=d1, out=CRegisterAIn16);

    Mux16(a=ALUout, b=instruction, sel=isA, out=ARegisterIn);
    ARegister(in=ARegisterIn, load=registerALoad, out=registerA);
    DRegister(in=RegisterDIn, load=d2, out=registerD);

    PC(in=pcIn, load=shouldJump, inc=true, reset=reset, out[0..14]=pc);

    And16(a=registerA, b=true, out[0..14]=addressM);
}
